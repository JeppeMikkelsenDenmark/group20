---
title: "lab7_assignment"
format: html
editor: visual
---

# PCA Tidyverse style

## **Data & library Import (Jeppe)**

### Import libraries

```{r}
library(tidyverse)
library(broom)  # devtools::install_github("tidymodels/broom")
library(cowplot)


```

### Import data

```{r}
biopsy <- read_csv("https://wilkelab.org/classes/SDS348/data_sets/biopsy.csv")
```

## Look at the data in PC coordinates (Anton og Johan)
For a start, we remove all the non-numeric columns from the dataset (select(where(is.numeric))). After this, we are ready to make the PCA (prcomp()).

```{r}
pca_fit <- biopsy |> 
  select(where(is.numeric)) |>  # retain only numeric columns
  prcomp(scale = TRUE) # do PCA on scaled data
```

Next, we want to plot the obtained coordinates from the PCA. We want to see the coordinates projected onto principal component 1 and 2. We augment to get the categorigal variable (benign/malignant) from the original dataset assigned to the datapoints from the PCA..

```{r}
pca_fit  |> 
  augment(biopsy)  |>
  ggplot(aes(.fittedPC1, .fittedPC2, color = outcome)) + 
  geom_point(size = 1.5) +
  geom_hline(yintercept = 0) +
  geom_vline(xintercept = 0) +
  scale_color_manual(
    values = c(malignant = "red", benign = "blue")
  ) +
  theme_minimal() +
  labs(
    title = "Scatterplot showing data points projected onto PC1 and PC2",
    subtitle = "Benign vs. malignant tumor",
    x = "Principal component 1",
    y = "Principal component 2"
  )
```




## Look at the variance explained by each PC (Line og Oscar)

```{r}
# Do PCA
pca_fit <- biopsy |> 
  select(where(is.numeric)) |> # retain only numeric columns
  scale() |> # scale data
  prcomp() # do PCA


pca_fit |>
  tidy(matrix = "eigenvalues")

pca_fit |>
  tidy(matrix = "eigenvalues") |>
  ggplot(aes(x = "PC", y = percent, fill = as.factor(PC), color = "black", label = scales::percent(percent))) +
  geom_bar(stat = "identity", position = "stack", alpha = 0.8, color ="black") +
  geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0, 0.01))
  ) +
  labs(x = "PC", y = "Percentage", fill = "PC") +
  theme(legend.position = "none")


```

From the Principal components analysis it is clear that the first principal component explains 65% of the variance in the data, while all other principle components capture far less.
